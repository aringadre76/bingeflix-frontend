{"ast":null,"code":"const fetch=require('node-fetch');// Your TMDb API key\nconst apiKey='3b400d46d860ba7c351df26af82f99a8';// Function to search for the movie or TV show and get the correct ID\nasync function searchMulti(title){const searchUrl=\"https://api.themoviedb.org/3/search/multi?api_key=\".concat(apiKey,\"&query=\").concat(encodeURIComponent(title));const response=await fetch(searchUrl);const data=await response.json();if(data.results&&data.results.length>0){// Find an exact match by title\nconst exactMatch=data.results.find(result=>{const resultTitle=result.title||result.name;// Handle both movie and TV titles\nreturn resultTitle.toLowerCase()===title.toLowerCase();});if(exactMatch){return exactMatch;}// Fallback to the first result\nreturn data.results[0];}else{throw new Error('Title not found');}}// Function to get the description using the result\nasync function getDescription(result){const{id,media_type}=result;const detailUrl=\"https://api.themoviedb.org/3/\".concat(media_type,\"/\").concat(id,\"?api_key=\").concat(apiKey);const response=await fetch(detailUrl);const data=await response.json();if(data.overview){return data.overview;}else{throw new Error('Description not found');}}// Main function to get the description for a given title\nasync function fetchDescription(title){try{// Search for the title and get the most relevant result\nconst result=await searchMulti(title);// Get the description using the result\nconst description=await getDescription(result);return description;}catch(error){console.error(error.message);return null;}}module.exports=fetchDescription;","map":{"version":3,"names":["fetch","require","apiKey","searchMulti","title","searchUrl","concat","encodeURIComponent","response","data","json","results","length","exactMatch","find","result","resultTitle","name","toLowerCase","Error","getDescription","id","media_type","detailUrl","overview","fetchDescription","description","error","console","message","module","exports"],"sources":["C:/Users/Arin Gadre/OneDrive/Documents/CSE 115A/cse115afinalproject/Front-End/website-front-end/src/components/Home-page/descriptionFetcher.js"],"sourcesContent":["const fetch = require('node-fetch');\r\n\r\n// Your TMDb API key\r\nconst apiKey = '3b400d46d860ba7c351df26af82f99a8';\r\n\r\n// Function to search for the movie or TV show and get the correct ID\r\nasync function searchMulti(title) {\r\n  const searchUrl = `https://api.themoviedb.org/3/search/multi?api_key=${apiKey}&query=${encodeURIComponent(title)}`;\r\n  const response = await fetch(searchUrl);\r\n  const data = await response.json();\r\n\r\n  if (data.results && data.results.length > 0) {\r\n    // Find an exact match by title\r\n    const exactMatch = data.results.find(result => {\r\n      const resultTitle = result.title || result.name; // Handle both movie and TV titles\r\n      return resultTitle.toLowerCase() === title.toLowerCase();\r\n    });\r\n\r\n    if (exactMatch) {\r\n      return exactMatch;\r\n    }\r\n\r\n    // Fallback to the first result\r\n    return data.results[0];\r\n  } else {\r\n    throw new Error('Title not found');\r\n  }\r\n}\r\n\r\n// Function to get the description using the result\r\nasync function getDescription(result) {\r\n  const { id, media_type } = result;\r\n  const detailUrl = `https://api.themoviedb.org/3/${media_type}/${id}?api_key=${apiKey}`;\r\n  const response = await fetch(detailUrl);\r\n  const data = await response.json();\r\n\r\n  if (data.overview) {\r\n    return data.overview;\r\n  } else {\r\n    throw new Error('Description not found');\r\n  }\r\n}\r\n\r\n// Main function to get the description for a given title\r\nasync function fetchDescription(title) {\r\n  try {\r\n    // Search for the title and get the most relevant result\r\n    const result = await searchMulti(title);\r\n\r\n    // Get the description using the result\r\n    const description = await getDescription(result);\r\n    return description;\r\n  } catch (error) {\r\n    console.error(error.message);\r\n    return null;\r\n  }\r\n}\r\n\r\nmodule.exports = fetchDescription;\r\n"],"mappings":"AAAA,KAAM,CAAAA,KAAK,CAAGC,OAAO,CAAC,YAAY,CAAC,CAEnC;AACA,KAAM,CAAAC,MAAM,CAAG,kCAAkC,CAEjD;AACA,cAAe,CAAAC,WAAWA,CAACC,KAAK,CAAE,CAChC,KAAM,CAAAC,SAAS,sDAAAC,MAAA,CAAwDJ,MAAM,YAAAI,MAAA,CAAUC,kBAAkB,CAACH,KAAK,CAAC,CAAE,CAClH,KAAM,CAAAI,QAAQ,CAAG,KAAM,CAAAR,KAAK,CAACK,SAAS,CAAC,CACvC,KAAM,CAAAI,IAAI,CAAG,KAAM,CAAAD,QAAQ,CAACE,IAAI,CAAC,CAAC,CAElC,GAAID,IAAI,CAACE,OAAO,EAAIF,IAAI,CAACE,OAAO,CAACC,MAAM,CAAG,CAAC,CAAE,CAC3C;AACA,KAAM,CAAAC,UAAU,CAAGJ,IAAI,CAACE,OAAO,CAACG,IAAI,CAACC,MAAM,EAAI,CAC7C,KAAM,CAAAC,WAAW,CAAGD,MAAM,CAACX,KAAK,EAAIW,MAAM,CAACE,IAAI,CAAE;AACjD,MAAO,CAAAD,WAAW,CAACE,WAAW,CAAC,CAAC,GAAKd,KAAK,CAACc,WAAW,CAAC,CAAC,CAC1D,CAAC,CAAC,CAEF,GAAIL,UAAU,CAAE,CACd,MAAO,CAAAA,UAAU,CACnB,CAEA;AACA,MAAO,CAAAJ,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CACxB,CAAC,IAAM,CACL,KAAM,IAAI,CAAAQ,KAAK,CAAC,iBAAiB,CAAC,CACpC,CACF,CAEA;AACA,cAAe,CAAAC,cAAcA,CAACL,MAAM,CAAE,CACpC,KAAM,CAAEM,EAAE,CAAEC,UAAW,CAAC,CAAGP,MAAM,CACjC,KAAM,CAAAQ,SAAS,iCAAAjB,MAAA,CAAmCgB,UAAU,MAAAhB,MAAA,CAAIe,EAAE,cAAAf,MAAA,CAAYJ,MAAM,CAAE,CACtF,KAAM,CAAAM,QAAQ,CAAG,KAAM,CAAAR,KAAK,CAACuB,SAAS,CAAC,CACvC,KAAM,CAAAd,IAAI,CAAG,KAAM,CAAAD,QAAQ,CAACE,IAAI,CAAC,CAAC,CAElC,GAAID,IAAI,CAACe,QAAQ,CAAE,CACjB,MAAO,CAAAf,IAAI,CAACe,QAAQ,CACtB,CAAC,IAAM,CACL,KAAM,IAAI,CAAAL,KAAK,CAAC,uBAAuB,CAAC,CAC1C,CACF,CAEA;AACA,cAAe,CAAAM,gBAAgBA,CAACrB,KAAK,CAAE,CACrC,GAAI,CACF;AACA,KAAM,CAAAW,MAAM,CAAG,KAAM,CAAAZ,WAAW,CAACC,KAAK,CAAC,CAEvC;AACA,KAAM,CAAAsB,WAAW,CAAG,KAAM,CAAAN,cAAc,CAACL,MAAM,CAAC,CAChD,MAAO,CAAAW,WAAW,CACpB,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAACE,OAAO,CAAC,CAC5B,MAAO,KAAI,CACb,CACF,CAEAC,MAAM,CAACC,OAAO,CAAGN,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}