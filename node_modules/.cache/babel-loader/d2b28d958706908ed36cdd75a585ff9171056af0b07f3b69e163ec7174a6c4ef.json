{"ast":null,"code":"const fetch = require('node-fetch');\n\n// Your TMDb API key\nconst apiKey = '3b400d46d860ba7c351df26af82f99a8';\n\n// Function to search for the movie or TV show and get the correct ID\nasync function searchMulti(title) {\n  const searchUrl = `https://api.themoviedb.org/3/search/multi?api_key=${apiKey}&query=${encodeURIComponent(title)}`;\n  const response = await fetch(searchUrl);\n  const data = await response.json();\n  if (data.results && data.results.length > 0) {\n    // Find an exact match by title\n    const exactMatch = data.results.find(result => {\n      const resultTitle = result.title || result.name; // Handle both movie and TV titles\n      return resultTitle.toLowerCase() === title.toLowerCase();\n    });\n    if (exactMatch) {\n      return exactMatch;\n    }\n\n    // Fallback to the first result\n    return data.results[0];\n  } else {\n    throw new Error('Title not found');\n  }\n}\n\n// Function to get the poster URL using the result\nasync function getPosterUrl(result) {\n  const {\n    id,\n    media_type\n  } = result;\n  const detailUrl = `https://api.themoviedb.org/3/${media_type}/${id}?api_key=${apiKey}`;\n  const response = await fetch(detailUrl);\n  const data = await response.json();\n  if (data.poster_path) {\n    return `https://image.tmdb.org/t/p/w500${data.poster_path}`;\n  } else {\n    throw new Error('Poster not found');\n  }\n}\n\n// Main function to get the poster URL for a given title\nasync function fetchPosterURL(title) {\n  try {\n    // Search for the title and get the most relevant result\n    const result = await searchMulti(title);\n\n    // Get the poster URL using the result\n    const posterUrl = await getPosterUrl(result);\n    return posterUrl;\n  } catch (error) {\n    console.error(error.message);\n    return null;\n  }\n}\nmodule.exports = fetchPosterURL;","map":{"version":3,"names":["fetch","require","apiKey","searchMulti","title","searchUrl","encodeURIComponent","response","data","json","results","length","exactMatch","find","result","resultTitle","name","toLowerCase","Error","getPosterUrl","id","media_type","detailUrl","poster_path","fetchPosterURL","posterUrl","error","console","message","module","exports"],"sources":["C:/Users/Arin Gadre/OneDrive/Documents/CSE 115A/cse115afinalproject/Front-End/website-front-end/src/components/Home-page/posterFetcher.js"],"sourcesContent":["const fetch = require('node-fetch');\r\n\r\n// Your TMDb API key\r\nconst apiKey = '3b400d46d860ba7c351df26af82f99a8';\r\n\r\n// Function to search for the movie or TV show and get the correct ID\r\nasync function searchMulti(title) {\r\n  const searchUrl = `https://api.themoviedb.org/3/search/multi?api_key=${apiKey}&query=${encodeURIComponent(title)}`;\r\n  const response = await fetch(searchUrl);\r\n  const data = await response.json();\r\n\r\n  if (data.results && data.results.length > 0) {\r\n    // Find an exact match by title\r\n    const exactMatch = data.results.find(result => {\r\n      const resultTitle = result.title || result.name; // Handle both movie and TV titles\r\n      return resultTitle.toLowerCase() === title.toLowerCase();\r\n    });\r\n\r\n    if (exactMatch) {\r\n      return exactMatch;\r\n    }\r\n\r\n    // Fallback to the first result\r\n    return data.results[0];\r\n  } else {\r\n    throw new Error('Title not found');\r\n  }\r\n}\r\n\r\n// Function to get the poster URL using the result\r\nasync function getPosterUrl(result) {\r\n  const { id, media_type } = result;\r\n  const detailUrl = `https://api.themoviedb.org/3/${media_type}/${id}?api_key=${apiKey}`;\r\n  const response = await fetch(detailUrl);\r\n  const data = await response.json();\r\n\r\n  if (data.poster_path) {\r\n    return `https://image.tmdb.org/t/p/w500${data.poster_path}`;\r\n  } else {\r\n    throw new Error('Poster not found');\r\n  }\r\n}\r\n\r\n// Main function to get the poster URL for a given title\r\nasync function fetchPosterURL(title) {\r\n  try {\r\n    // Search for the title and get the most relevant result\r\n    const result = await searchMulti(title);\r\n\r\n    // Get the poster URL using the result\r\n    const posterUrl = await getPosterUrl(result);\r\n    return posterUrl;\r\n  } catch (error) {\r\n    console.error(error.message);\r\n    return null;\r\n  }\r\n}\r\n\r\nmodule.exports = fetchPosterURL;\r\n"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,YAAY,CAAC;;AAEnC;AACA,MAAMC,MAAM,GAAG,kCAAkC;;AAEjD;AACA,eAAeC,WAAWA,CAACC,KAAK,EAAE;EAChC,MAAMC,SAAS,GAAI,qDAAoDH,MAAO,UAASI,kBAAkB,CAACF,KAAK,CAAE,EAAC;EAClH,MAAMG,QAAQ,GAAG,MAAMP,KAAK,CAACK,SAAS,CAAC;EACvC,MAAMG,IAAI,GAAG,MAAMD,QAAQ,CAACE,IAAI,CAAC,CAAC;EAElC,IAAID,IAAI,CAACE,OAAO,IAAIF,IAAI,CAACE,OAAO,CAACC,MAAM,GAAG,CAAC,EAAE;IAC3C;IACA,MAAMC,UAAU,GAAGJ,IAAI,CAACE,OAAO,CAACG,IAAI,CAACC,MAAM,IAAI;MAC7C,MAAMC,WAAW,GAAGD,MAAM,CAACV,KAAK,IAAIU,MAAM,CAACE,IAAI,CAAC,CAAC;MACjD,OAAOD,WAAW,CAACE,WAAW,CAAC,CAAC,KAAKb,KAAK,CAACa,WAAW,CAAC,CAAC;IAC1D,CAAC,CAAC;IAEF,IAAIL,UAAU,EAAE;MACd,OAAOA,UAAU;IACnB;;IAEA;IACA,OAAOJ,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC;EACxB,CAAC,MAAM;IACL,MAAM,IAAIQ,KAAK,CAAC,iBAAiB,CAAC;EACpC;AACF;;AAEA;AACA,eAAeC,YAAYA,CAACL,MAAM,EAAE;EAClC,MAAM;IAAEM,EAAE;IAAEC;EAAW,CAAC,GAAGP,MAAM;EACjC,MAAMQ,SAAS,GAAI,gCAA+BD,UAAW,IAAGD,EAAG,YAAWlB,MAAO,EAAC;EACtF,MAAMK,QAAQ,GAAG,MAAMP,KAAK,CAACsB,SAAS,CAAC;EACvC,MAAMd,IAAI,GAAG,MAAMD,QAAQ,CAACE,IAAI,CAAC,CAAC;EAElC,IAAID,IAAI,CAACe,WAAW,EAAE;IACpB,OAAQ,kCAAiCf,IAAI,CAACe,WAAY,EAAC;EAC7D,CAAC,MAAM;IACL,MAAM,IAAIL,KAAK,CAAC,kBAAkB,CAAC;EACrC;AACF;;AAEA;AACA,eAAeM,cAAcA,CAACpB,KAAK,EAAE;EACnC,IAAI;IACF;IACA,MAAMU,MAAM,GAAG,MAAMX,WAAW,CAACC,KAAK,CAAC;;IAEvC;IACA,MAAMqB,SAAS,GAAG,MAAMN,YAAY,CAACL,MAAM,CAAC;IAC5C,OAAOW,SAAS;EAClB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAACE,OAAO,CAAC;IAC5B,OAAO,IAAI;EACb;AACF;AAEAC,MAAM,CAACC,OAAO,GAAGN,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}